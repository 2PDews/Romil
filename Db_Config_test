1. Install Dependencies

npm init -y
npm install lowdb lodash express body-parser

2. Setup Database (db.js)

Create a db.js file to handle database operations using LowDB.

const { Low, JSONFile } = require('lowdb');
const path = require('path');

// File-based JSON database
const file = path.join(__dirname, 'database.json');
const db = new Low(new JSONFile(file));

async function initializeDB() {
    await db.read();
    db.data = db.data || { users: [], players: [], tournaments: [], matches: [] };
    await db.write();
}

initializeDB();

module.exports = db;
3. Create API (server.js)

This file sets up an Express.js API to manage users, players, tournaments, and matches.

const express = require('express');
const bodyParser = require('body-parser');
const db = require('./db');
const app = express();

app.use(bodyParser.json());

// Signup
app.post('/signup', async (req, res) => {
    const { email, password } = req.body;
    await db.read();
    db.data.users.push({ email, password });
    await db.write();
    res.json({ message: 'User registered successfully!' });
});

// Add Player
app.post('/players', async (req, res) => {
    const { name, runs, wickets, totalMatches, totalWin, totalLoss } = req.body;
    await db.read();
    db.data.players.push({ name, runs, wickets, totalMatches, totalWin, totalLoss });
    await db.write();
    res.json({ message: 'Player added successfully!' });
});

// Create Tournament
app.post('/tournaments', async (req, res) => {
    const { id, name, innings, format } = req.body;
    await db.read();
    db.data.tournaments.push({ id, name, innings, format, players: [] });
    await db.write();
    res.json({ message: 'Tournament created successfully!' });
});

// Add Player to Tournament
app.post('/tournaments/:id/players', async (req, res) => {
    const { playerName } = req.body;
    const tournamentId = req.params.id;
    await db.read();
    const tournament = db.data.tournaments.find(t => t.id === tournamentId);
    const player = db.data.players.find(p => p.name === playerName);

    if (tournament && player) {
        tournament.players.push(player);
        await db.write();
        res.json({ message: Player ${playerName} added to Tournament ${tournamentId} });
    } else {
        res.status(404).json({ message: 'Tournament or Player not found' });
    }
});

// Schedule Matches
app.post('/matches', async (req, res) => {
    const { tournamentId, innings, playerName, runs, wickets } = req.body;
    await db.read();
    db.data.matches.push({ tournamentId, innings, playerName, runs, wickets });
    await db.write();
    res.json({ message: 'Match scheduled successfully!' });
});

// Delete Tournament
app.delete('/tournaments/:id', async (req, res) => {
    const tournamentId = req.params.id;
    await db.read();
    db.data.tournaments = db.data.tournaments.filter(t => t.id !== tournamentId);
    await db.write();
    res.json({ message: Tournament ${tournamentId} deleted successfully! });
});

// Start Server
const PORT = 3000;
app.listen(PORT, () => console.log(Server running on http://localhost:${PORT}));
4. Run the Server
node server.js

5. Test API using Postman or Curl

Signup a user
curl -X POST http://localhost:3000/signup -H "Content-Type: application/json" -d '{"email": "user@example.com", "password": "securepass"}'
Add a Player
curl -X POST http://localhost:3000/players -H "Content-Type: application/json" -d '{"name": "Virat", "runs": 10000, "wickets": 20, "totalMatches": 250, "totalWin": 150, "totalLoss": 100}'
Create a Tournament
curl -X POST http://localhost:3000/tournaments -H "Content-Type: application/json" -d '{"id": "T1", "name": "World Cup", "innings": 2, "format": "League+Knockout"}'
Add Player to Tournament
curl -X POST http://localhost:3000/tournaments/T1/players -H "Content-Type: application/json" -d '{"playerName": "Virat"}'
Schedule a Match
curl -X POST http://localhost:3000/matches -H "Content-Type: application/json" -d '{"tournamentId": "T1", "innings": 2, "playerName": "Virat", "runs": 80, "wickets": 2}'
Delete a Tournament
curl -X DELETE http://localhost:3000/tournaments/T1